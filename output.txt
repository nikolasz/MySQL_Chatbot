
===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\main.py =====
# main.py
import os
import sys
import json
sys.path.insert(0, os.path.abspath('modules'))

from modules.config import load_config
from modules.schema import load_schema
from modules.openai_api import init_openai_api
from modules.query_generator import generate_sql_query
from modules.database import create_connection, execute_query, close_connection
import logging

def main():
    # Set up logging
    logging.basicConfig(filename='app.log', level=logging.INFO)

    # Load config and schema.
    config = load_config()
    current_directory = os.path.dirname(os.path.abspath(__file__))

    # Load SQL commands
    sql_commands_path = os.path.join(current_directory, 'sql_commands.json')
    with open(sql_commands_path, 'r') as f:
        sql_commands = json.load(f)

    # Load schema
    schema = {}
    try:
        schema_path = os.path.join(current_directory, 'schema.json')
        with open(schema_path, 'r') as f:
            schema = json.load(f)
        print(f'Schema loaded: {json.dumps(schema, indent=4)}')

    except Exception as e:
        logging.error("Exception occurred", exc_info=True)

    # Generate SQL query.
    query = input("Enter a natural language prompt: ")

    cnx = None

    try:
        sql_query = generate_sql_query(schema, query, sql_commands)
        print(sql_query)

        cnx = create_connection()
        result = execute_query(cnx, sql_query)
        print(result)

    except Exception as e:
        logging.error("Exception occurred", exc_info=True)

    finally:
        if cnx:
            close_connection(cnx)

if __name__ == '__main__':
    main()


===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\README.md =====
# MySQL Chatbot

This is a personal learning project titled 'MySQL Chatbot'. It's a program that leverages the GPT-4 model from OpenAI to generate parameterized SQL queries from natural language inputs.

This is left intentionally blank to save tokens.
===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\sql_commands.json =====
{
    "CREATE": "Creates a new table, a view of a table, or other object in the database.",
    "ALTER": "Modifies an existing database object, such as a table.",
    "DROP": "Deletes an entire table, a view of a table, or other objects in the database.",
    ...,
    ...,
    "FULL (OUTER) JOIN": "Returns all records when there is a match in either the left or the right table.",
    "INNER JOIN": "Returns records that have matching values in both tables.",
    "NULL": "Represents a missing or unknown value. You can use the IS NULL or IS NOT NULL operators in conjunction with NULL.",
    "AS": "Used to rename a column or table with an alias."
}

===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\modules\config.py =====
# config.py
import os
from dotenv import load_dotenv

load_dotenv()
def load_config():
    config = {
        'OPENAI_API_KEY': os.getenv('OPENAI_API_KEY'),
        'DB_USER': os.getenv('DB_USER'),
        'DB_PASSWORD': os.getenv('DB_PASSWORD'),
        'DB_HOST': os.getenv('DB_HOST'),
        'DB_DATABASE': os.getenv('DB_DATABASE')
    }
    return config

def get_openai_api_key():
    return load_config()['OPENAI_API_KEY']

def get_db_config():
    config = load_config()
    return {
        'user': config['DB_USER'],
        'password': config['DB_PASSWORD'],
        'host': config['DB_HOST'],
        'database': config['DB_DATABASE']
    }

===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\modules\database.py =====
# import mysql.connector
from config import get_db_config

def create_connection():
    db_config = get_db_config()
    try:
        cnx = mysql.connector.connect(user=db_config['user'], password=db_config['password'], host=db_config['host'], database=db_config['database'])
        if cnx.is_connected():
            print("Successfully connected to the database.")
            return cnx
    except Error as e:
        print(f"The error '{e}' occurred.")
pass
def execute_query(cnx, query, params=None):
    """
    Execute a query on the database.

    Args:
        cnx (obj): The database connection object.
        query (str): The SQL query to execute.
        params (tuple, optional): The parameters for the SQL query.

    Returns:
        list: The result of the query.
    """
    cursor = cnx.cursor()
    cursor.execute(query, params)

    result = cursor.fetchall()

    cursor.close()

    return result


def close_connection(cnx):
    """
    Close the connection to the database.

    Args:
        cnx (obj): The database connection object.
    """
    cnx.close()


===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\modules\openai_api.py =====
# openai_api.py
import openai
from config import get_openai_api_key

def init_openai_api():
    openai.api_key = get_openai_api_key()

def generate_response(messages):

    response = openai.ChatCompletion.create(
        model="gpt-4",
        messages=messages,
        temperature=0.1,
        max_tokens=200
    )

    return response['choices'][0]['message']['content'].strip()


===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\modules\query_generator.py =====
# query_generator.py
from openai_api import generate_response
import json
import logging

def generate_sql_query(schema, query, sql_commands):
    # Prepare the system message
    system_message = f'''
    You are an SQL query generator. Generate an SQL query based on the following schema, SQL commands, and user's input.
    Schema: {json.dumps(schema, indent=4)}
    SQL Commands: {json.dumps(sql_commands, indent=4)}
    '''

    # Prepare the messages
    messages=[
        {"role": "system", "content": system_message},
        {"role": "user", "content": query}
    ]
    # Print schema and SQL commands for debugging
    print(f'Schema: {json.dumps(schema, indent=4)}')
    print(f'SQL Commands: {json.dumps(sql_commands, indent=4)}')
    # Call OpenAI API
    response = generate_response(messages)

    # Error checking
    if not response:
        logging.error(f"No response received for query: {query}")
        return 'error'
    if 'error' in response:
        logging.error(f"An error occurred while generating the query: {response}")
        return 'error'

    # Return the generated SQL query
    return response


===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\modules\schema.json =====
{
    "tables": {
        "users": {
            "columns": {
                "id": {
                    "type": "integer",
                    "nullable": false,
                    "primary_key": true
                },
                "name": {
                    "type": "string",
                    "nullable": false
                },
                "email": {
                    "type": "string",
                    "nullable": true
                }
            }
        }
    }
}


===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\modules\schema.py =====
import json
import os
import logging

def load_schema(schema_file='schema.json'):
    schema_path = os.path.join(os.path.dirname(__file__), schema_file)
    if not os.path.exists(schema_path):
        logging.warning(f"Schema file {schema_file} does not exist.")
        return None

    try:
        with open(schema_path, 'r') as file:
            schema = json.load(file)
            return schema
    except json.JSONDecodeError:
        logging.warning(f"Schema file {schema_file} is not a valid JSON file.")
        return None
    print(schema)
def validate_data(data, schema):
    # This is placeholder for data validation logic.
    # Accessing data and schema to remove the warning
    print(data, schema)
    return True


===== c:\Users\Nick\Documents\Resumes\MySQL_Chatbot\modules\__init__.py =====
